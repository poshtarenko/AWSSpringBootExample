server:
  port: 8092

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      keySerializer: "org.apache.kafka.common.serialization.StringSerializer"
      valueSerializer: "io.confluent.kafka.serializers.KafkaAvroSerializer"
      properties:
        schema:
          registry:
            url: ${KAFKA_SCHEMA_REGISTRY_URL:http://localhost:8081}
    listener:
      ack-mode: manual-immediate
    consumer:
      group-id: "ORDERS_SERVICE_GROUP"
      enable-auto-commit: false
      keyDeserializer: "org.apache.kafka.common.serialization.StringDeserializer"
      valueDeserializer: "io.confluent.kafka.serializers.KafkaAvroDeserializer"
      autoOffsetReset: "earliest"
      properties:
        schema:
          registry:
            url: ${KAFKA_SCHEMA_REGISTRY_URL:http://localhost:8081}
        specific:
          avro:
            reader: "true"

avro:
  topic:
    name: "spring.boot.stock.history.avro.topic.v1"

topic-names:
  order-creation: order-creation
  change-order-destination: change-order-destination
  update-order-status: update-order-status

amazon:
  aws:
    accesskey: ${AWS_ACCESSKEY}
    secretkey: ${AWS_SECRETKEY}
  dynamodb:
    endpoint: dynamodb.eu-north-1.amazonaws.com
  s3:
    buckets:
      product-reports: my-product-reports

