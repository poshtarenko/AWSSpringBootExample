apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders-service
  template:
    metadata:
      name: orders-service
      labels:
        app: orders-service
    spec:
      containers:
        - name: orders-service
          resources:
            requests:
              cpu: 300m
              memory: 600Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            initialDelaySeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: 8080
            failureThreshold: 30
            periodSeconds: 10
          env:
            - name: DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: postgres-orders-config
                  key: postgres_user
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: postgres-orders-config
                  key: postgres_password
            - name: DB_URL
              value: jdbc:postgresql://postgres-orders:5432/orders-service-db
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: kafka-service:9092
            - name: KAFKA_SCHEMA_REGISTRY_URL
              value: http://schema-registry:8081
          image: {{ .Values.images.ordersservice }}
          imagePullPolicy: Never
---
apiVersion: v1
kind: Service
metadata:
  name: orders-service-svc
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: orders-service
  type: ClusterIP